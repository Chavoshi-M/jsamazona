{
  "name": "jsamazona",
  "version": "1.0.0",
  "description": "JS AMAZONA\r 1. Create Folder Structure\r    1. create root folder as jsamazona\r    2. add frontend and backend folder\r    3. create src folder in frontend\r    4. create index.html with heading jsamazona in src\r    5. run npm init in frontend folder\r    6. npm install live-server\r    7. add start command as live-server src --verbose\r    8. run npm start\r    9. check result\r 2. Design Website\r    1. create style.css\r    2. link style.css to index.html\r    3. create div.grid-container\r    4. create header, main and footer\r    5. style html, body\r    6. style grid-container, header, main and footer\r 3. Create Static Home Screen\r    1. create ul.products\r    2. create li\r    3. create div.product\r    4. add .product-image, .product-name, .product-brand, .product-price\r    5. style ul.products and internal divs\r    6. duplicate 2 times to show 3 products\r 4. Render Dynamic Home Screen\r    1. create data.js\r    2. export an array of 6 products\r    3. create screens/HomeScreen.js\r    4. export HomeScreen as an object with render() method\r    5. implement render()\r    6. import data.js\r    7. return products mapped to lis inside an ul\r    8. create app.js\r    9. link it to index.html as module\r    10. set main id to main-container\r    11. create router() function\r    12. set main_container innerHTML to HomeScreen.render()\r    13. set load event of window to router() function\r 5. Build Url Router\r    1. create routes as route:screen object for home screen\r    2. create utils.js\r    3. export parseRequestURL()\r    4. set url as hash address split by slash\r    5. return resource, id and verb of url\r    6. update router()\r    7. set request as parseRequestURL()\r    8. build parsedUrl and compare with routes\r    9. if route exists render it, else render Error404\r    10. create screens/Error404.js and render error message\r 6. Create Node.JS Server\r    1. run npm init in root jsamazona folder\r    2. npm install express\r    3. create server.js\r    4. add start command as node backend/server.js\r    5. require express\r    6. move data.js from frontend to backend\r    7. create route for /api/products\r    8. return products in data.js\r    9. run npm start\r 7. Load Products From Backend\r    1. edit HomeScreen.js\r    2. make render async\r    3. fetch products from '/api/products' in render()\r    4. make router() async and call await HomeScreen.render()\r    5. use cors on backend\r    6. check the result\r 8. Add Webpack\r    1. cd frontend\r    2. npm install -D webpack webpack-cli webpack-dev-server\r    3. npm uninstall live-server\r    4. \"start\": \"webpack-dev-server --mode development --watch-content-base --open\"\r    5. move index.html, style.css and images to frontend folder\r    6. rename app.js to index.js\r    7. update index.html\r    8. add script main.js before body tag\r    9. npm start\r    10. npm install axios\r    11. change fetch to axios in HomeScreen\r 9. Install Babel For ES6 Syntax\r    1. npm install -D babel core, cli, node, preset-env\r    2. Create .babelrc and set presets to @babel/preset-env\r    3. npm install -D nodemon\r    4. set start: nodemon --watch backend --exec babel-node backend/server.js\r    5. convert require to import in server.js\r    6. npm start\r 10. Enable Code Linting\r     1. npm install -D eslint\r     2. install VSCode eslint extension\r     3. create .eslintrc and set module.exports for env to node\r     4. Set VSCode setting for editor.codeActionsOnSave source.fixAll.eslint to true\r     5. check result for linting error\r     6. npm install eslint-config-airbnb-base and eslint-plugin-import\r     7. set extends to airbnb-base\r     8. set parserOptions to ecmaVersion 11 and sourceType to module\r     9. set rules for no-console to 0 to ignore linting error\r 11. Install VSCode Extension\r     1. JavaScript (ES6) code snippets\r     2. ES7 React/Redux/GraphQL/React-Native snippets\r     3. Prettier - Code formatter\r     4. HTML&LESS grammar injections\r 12. Create Rating Component\r     1. create components/Rating.js\r     2. link to fontawesome.css in index.html\r     3. create div.rating\r     4. define Rating object with render()\r     5. if !props.value return empty div\r     6. else use fa fa-star, fa-star-half-o and fa-star-o\r     7. last span for props.text || ''\r     8. style div.rating, span and last span\r     9. Edit HomeScreen\r     10. Add div.product-rating and use Rating component\r 13. Product Screen\r     1. get product id from request\r     2. implement /api/product/:id api\r     3. send Ajax request to product api\r 14. Product Screen UI\r     1. create back to result link\r     2. create div.details with 3 columns\r     3. column 1 for product image\r     4. column 2 for product information\r     5. column 3 form product action\r     6. style .details and all columns\r     7. create add to cart button with add-button id\r 15. Product Screen Action\r     1. after_render() to add event to the button\r     2. add event handler for the button\r     3. redirect user to cart/:product_id\r     4. implement after_render in index.js\r 16. Add To Cart Action\r     1. create CartScreen.js\r     2. parseRequestUrl\r     3. getProduct(request.id)\r     4. addToCart\r     5. getCartItems\r     6. cartItems.find\r     7. if existItem update qty\r     8. else add item\r     9. setCartItems\r 17. Cart Screen UI\r     1. cartItems = getCartItems()\r     2. create 2 columns for cart items and cart action\r     3. cartItems.length === 0 ? cart is empty\r     4. show item image, name, qty and price\r     5. cart action\r     6. Subtotal\r     7. Proceed to Checkout button\r     8. Add CSS Style\r 18. Update and Delete Cart Items\r     1. add qty select next to each item\r     2. after_render()\r     3. add change event to qty select\r     4. getCartItems() and pass to addToCart()\r     5. set force to true to addToCart()\r     6. create rerender() as (component, areaName = 'content')\r     7. component.render and component.after_render\r     8. if force is true then rerender()\r     9. add delete button next to each item\r     10. add click event to qty button\r     11. call removeFromCart(deleteButton.id)\r     12. implement removeFromCart(id)\r     13. setCartItems( getCartItems().filter)\r     14. if id === parseRequestUrl().id? redirect to '/cart'\r     15. else rerender(CartScreen);\r 19. Connect To MongoDB and Create Admin User\r     1. npm install mongoose\r     2. connect to mongodb\r     3. create config.js\r     4. npm install dotenv\r     5. export MONGODB_URL\r     6. create models/userModel.js\r     7. create userSchema and userModel\r     8. create userRoute\r     9. create createadmin route\r 20. Sign-in Screen UI\r     1. create SigninScreen\r     2. render email and password fields\r     3. style signin form\r 21. Sign-in Screen Backend\r     1. create signin api in backend\r     2. create route for /api/users/signin\r     3. create check user name and password\r     4. if it is not ok the return 401 error\r     5. install express-async-handler\r     6. wrap it in expressAsyncHandler\r     7. add error middleware in server.js\r     8. install Postman\r     9. send post request\r     10. test with invalid user password\r     11. otherwise generate token\r     12. install jsonwebtoken\r     13. set config.JWT_SECRET to somethingsecret\r     14. add generateToken to utils.js\r     15. return token\r     16. test with correct user and password\r 22. Sign-in Screen Action\r     1. after_render handle form submit\r     2. create signin request in frontend\r     3. show alert if email or password is incorrect\r     4. Add getUserInfo and setUserInfo to localStorage\r     5. create Header component\r     6. if userInfo.email exist show user name otherwise show signin\r 23. Create Progress Indicator and Alert Component\r     1. create overlay loading div in index.html\r     2. Style overlay loading\r     3. create showLoading() function\r     4. set loading-overlay classList add active\r     5. create hideLoading() function\r     6. create overlay message div in index.html\r     7. add style overlay message\r     8. create showMessage(message, callback)\r     9. document message-overlay set inner HTML\r     10. div > div id message-overlay-content\r     11. show message\r     12. button id message-overlay-close-button OK\r     13. add class active to it\r     14. add event listener for button to call callback\r 24. Register Screen\r     1. create RegisterScreen.js\r     2. add form elements\r     3. after_render handle form submit\r     4. create register request in frontend\r     5. create register api in backend\r 25. User Profile Screen\r     1. create ProfileScreen.js\r     2. add form elements\r     3. after_render handle form submit\r     4. create profile update request in frontend\r     5. create profile update api in backend\r     6. create isAuth in utils.js and use in update profile\r     7. implement sign out\r 26. Checkout Wizard\r     1. create CheckoutSteps.js\r     2. create div elements for step 1 to 4\r     3. create redirectUser() in utils.js\r     4. copy profile screen and as shipping screen\r     5. use CheckoutStep\r     6. define getShipping and setShipping\r     7. copy shipping screen and as payment screen\r     8. define getPayment and setPayment\r     9. redirect user to PlaceOrder.js\r 27. PlaceOrder Screen UI\r     1. create PlaceOrder.js\r     2. style elements\r 28. PlaceOrder Screen Action\r     1. handle place order button click\r     2. createOrder api\r     3. create orderModel\r     4. create orderRouter\r     5. create post order route\r 29. Order Screen\r     1. create OrderScreen.js\r     2. style elements",
  "main": "index.js",
  "scripts": {
    "start": "nodemon --watch backend --exec babel-node backend/server.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Chavoshi-M/jsamazona.git"
  },
  "author": "",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/Chavoshi-M/jsamazona/issues"
  },
  "homepage": "https://github.com/Chavoshi-M/jsamazona#readme",
  "dependencies": {
    "body-parser": "^1.19.0",
    "cors": "^2.8.5",
    "dotenv": "^10.0.0",
    "express": "^4.17.1",
    "express-async-handler": "^1.1.4",
    "jsonwebtoken": "^8.5.1",
    "mongoose": "^5.13.5"
  },
  "devDependencies": {
    "@babel/cli": "^7.14.3",
    "@babel/core": "^7.14.3",
    "@babel/node": "^7.14.2",
    "@babel/preset-env": "^7.14.4",
    "eslint": "^7.30.0",
    "eslint-config-airbnb-base": "^14.2.1",
    "eslint-config-prettier": "^8.3.0",
    "eslint-plugin-import": "^2.23.4",
    "nodemon": "^2.0.7"
  }
}
